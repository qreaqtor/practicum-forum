// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/post.go

// Package handlers is a generated GoMock package.
package handlers

import (
	models "forum/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockpostManager is a mock of postManager interface.
type MockpostManager struct {
	ctrl     *gomock.Controller
	recorder *MockpostManagerMockRecorder
}

// MockpostManagerMockRecorder is the mock recorder for MockpostManager.
type MockpostManagerMockRecorder struct {
	mock *MockpostManager
}

// NewMockpostManager creates a new mock instance.
func NewMockpostManager(ctrl *gomock.Controller) *MockpostManager {
	mock := &MockpostManager{ctrl: ctrl}
	mock.recorder = &MockpostManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostManager) EXPECT() *MockpostManagerMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockpostManager) AddComment(arg0 string, arg1 *models.CommentInput, arg2 *models.Author) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockpostManagerMockRecorder) AddComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockpostManager)(nil).AddComment), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockpostManager) Create(arg0 *models.PostInput, arg1 *models.Author) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockpostManagerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockpostManager)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockpostManager) Delete(postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockpostManagerMockRecorder) Delete(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpostManager)(nil).Delete), postID)
}

// DeleteComment mocks base method.
func (m *MockpostManager) DeleteComment(arg0, arg1 string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockpostManagerMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockpostManager)(nil).DeleteComment), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockpostManager) FindOne(postID string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockpostManagerMockRecorder) FindOne(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockpostManager)(nil).FindOne), postID)
}

// GetAll mocks base method.
func (m *MockpostManager) GetAll() ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockpostManagerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockpostManager)(nil).GetAll))
}

// GetAllByCategory mocks base method.
func (m *MockpostManager) GetAllByCategory(arg0 string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByCategory", arg0)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByCategory indicates an expected call of GetAllByCategory.
func (mr *MockpostManagerMockRecorder) GetAllByCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByCategory", reflect.TypeOf((*MockpostManager)(nil).GetAllByCategory), arg0)
}

// GetAllByUser mocks base method.
func (m *MockpostManager) GetAllByUser(arg0 string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUser", arg0)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUser indicates an expected call of GetAllByUser.
func (mr *MockpostManagerMockRecorder) GetAllByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUser", reflect.TypeOf((*MockpostManager)(nil).GetAllByUser), arg0)
}

// UpdateVotes mocks base method.
func (m *MockpostManager) UpdateVotes(arg0, arg1 string, arg2 primitive.ObjectID) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVotes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVotes indicates an expected call of UpdateVotes.
func (mr *MockpostManagerMockRecorder) UpdateVotes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVotes", reflect.TypeOf((*MockpostManager)(nil).UpdateVotes), arg0, arg1, arg2)
}
